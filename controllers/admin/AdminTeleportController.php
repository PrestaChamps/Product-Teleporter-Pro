<?php
/**
 * PrestaChamps
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Commercial License
 * you can't distribute, modify or sell this code
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file
 * If you need help please contact leo@prestachamps.com
 *
 * @author    PrestaChamps <leo@prestachamps.com>
 * @copyright PrestaChamps
 * @license   commercial
 */

use \PrestaChamps\ProductTeleporter\Services\TeleporterService;

/**
 * Class AdminTeleportController
 */
class AdminTeleportController extends ModuleAdminController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function postProcess()
    {
        try {
            $productId = Tools::getValue('productId');
            $shopId = Tools::getValue('shopId');
            $product = new Product($productId);
            $shop = new Shop($shopId);
            if (Validate::isLoadedObject($product) && Validate::isLoadedObject($shop)) {
                $teleporter = new TeleporterService($product, $shop);
                if (Tools::getValue('method') === 'remove') {
                    $result = $teleporter->dissociate();
                    $message = $this->module->l("Product removed from shop {$shop->name}");
                } else {
                    $result = $teleporter->associate();
                    $message = $this->module->l("Product teleported to shop {$shop->name}");
                }
                @Cache::getInstance()->flush();

                $this->ajaxDie([
                    'success' => $result,
                    'message' => $message,
                    'associated' => (new Product($productId))->isAssociatedToShop($shopId),
                ]);
            } else {
                throw new InvalidArgumentException('Unknown product or shop');
            }
        } catch (\Exception $exception) {
            $this->ajaxDie(['success' => false, 'message' => $exception->getMessage()]);
        }
    }

    public function ajaxDie($value = null, $controller = null, $method = null)
    {
        header('Content-Type: application/json');
        $value = json_encode($value);
        parent::ajaxDie($value, $controller, $method);
    }


    protected function getProductImages()
    {

    }
}
